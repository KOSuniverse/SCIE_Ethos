# deployment/kubernetes/deployment.yaml
# Phase 6: Kubernetes Deployment Configuration
# Production-ready deployment with health checks, resource management, and scaling

apiVersion: apps/v1
kind: Deployment
metadata:
  name: scie-ethos
  namespace: production
  labels:
    app: scie-ethos
    version: v1.0.0
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: scie-ethos
  template:
    metadata:
      labels:
        app: scie-ethos
        version: v1.0.0
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8501"
        prometheus.io/path: "/metrics"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      
      # Image pull policy
      imagePullPolicy: Always
      
      # Init containers for database migrations
      initContainers:
      - name: db-migrate
        image: scie-ethos:latest
        command: ["python", "-m", "infrastructure.database", "migrate"]
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: db-host
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: db-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: db-password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      
      # Main application container
      containers:
      - name: scie-ethos
        image: scie-ethos:latest
        ports:
        - containerPort: 8501
          name: http
          protocol: TCP
        
        # Environment variables
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: db-host
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: db-name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: db-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: db-password
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: redis-host
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: redis-password
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: openai-api-key
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: aws-secret-access-key
        - name: AWS_DEFAULT_REGION
          value: "us-east-1"
        - name: S3_BUCKET
          valueFrom:
            secretKeyRef:
              name: scie-ethos-secrets
              key: s3-bucket
        
        # Resource requirements
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
        
        # Volume mounts
        volumeMounts:
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: temp-volume
          mountPath: /tmp
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: config-volume
        configMap:
          name: scie-ethos-config
      - name: logs-volume
        persistentVolumeClaim:
          claimName: scie-ethos-logs-pvc
      - name: temp-volume
        emptyDir: {}
      
      # Affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - scie-ethos
              topologyKey: kubernetes.io/hostname
        
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
        
        # Tolerations for node taints
        tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "dedicated"
          operator: "Equal"
          value: "scie-ethos"
          effect: "NoSchedule"
      
      # Image pull secrets
      imagePullSecrets:
      - name: scie-ethos-registry-secret
      
      # Service account
      serviceAccountName: scie-ethos-sa
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # DNS policy
      dnsPolicy: ClusterFirst
      
      # Restart policy
      restartPolicy: Always
      
      # Scheduler name
      schedulerName: default-scheduler
      
      # Priority class
      priorityClassName: high-priority
